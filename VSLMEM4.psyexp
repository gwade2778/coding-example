<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.1.2">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="$&quot;https://delawarepsych.sona-systems.com/webstudy_credit.aspx?experiment_id=258&amp;credit_token=607171114bb442a2933b1bfb90319717&amp;survey_code=&quot; + expInfo['participant']" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'Enter your sex': '', 'Enter your age': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="False" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="pix" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1024, 768]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[1,1,1]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="VSL_VWM_Py" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="feedback">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="fixOpacity = 1;&amp;#10;fbColor = &quot;red&quot;;&amp;#10;if ((nbackflags[(trial_1 - 1)] === 1)) {&amp;#10;    if ((key_resp.corr === 1)) {&amp;#10;        fbtext = &quot;Correct!&quot;;&amp;#10;        fbColor = &quot;green&quot;;&amp;#10;        hit = 1;&amp;#10;        miss = 0;&amp;#10;        FA = 0;&amp;#10;        CR = 0;&amp;#10;        fixOpacity=0;&amp;#10;    } else {&amp;#10;        fbtext = &quot;Miss, press space when shapes repeat!&quot;;&amp;#10;        fixOpacity=0;&amp;#10;        hit = 0;&amp;#10;        miss = 1;&amp;#10;        FA = 0;&amp;#10;        CR = 0;&amp;#10;    }&amp;#10;}&amp;#10;if ((nbackflags[(trial_1 - 1)] === 0)) {&amp;#10;    if ((key_resp.corr === 1)) {&amp;#10;        fbtext = &quot; &quot;;&amp;#10;        fixOpacity=1;&amp;#10;        hit = 0;&amp;#10;        miss = 0;&amp;#10;        FA = 0;&amp;#10;        CR = 1;&amp;#10;    } else {&amp;#10;        fbtext = &quot;False Alarm&quot;;&amp;#10;        fixOpacity=0;&amp;#10;        hit = 0;&amp;#10;        miss = 0;&amp;#10;        FA = 1;&amp;#10;        CR = 0;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="###Determine feedback prompt or ISI interval to be displayed.&amp;#10;fixOpacity = 1;&amp;#10;fbColor = &quot;red&quot;;&amp;#10;if nbackflags[trial_1-1] == 1:&amp;#10;    if key_resp.corr == 1:&amp;#10;        fbtext = 'Correct!'&amp;#10;        fbColor = &quot;green&quot;;&amp;#10;        hit = 1&amp;#10;        miss = 0&amp;#10;        FA = 0&amp;#10;        CR = 0&amp;#10;        fix_size = [0,0]&amp;#10;        fixOpacity=0;&amp;#10;&amp;#10;    else:&amp;#10;        fbtext = 'Miss'&amp;#10;        fixOpacity=0;&amp;#10;        fix_size = [0,0]&amp;#10;        hit = 0&amp;#10;        miss = 1&amp;#10;        FA = 0&amp;#10;        CR = 0&amp;#10;&amp;#10;if nbackflags[trial_1-1] == 0:&amp;#10;    if key_resp.corr == 1:&amp;#10;        fbtext = ' '&amp;#10;        fix_size = [15,15]&amp;#10;        hit = 0&amp;#10;        miss = 0&amp;#10;        FA = 0&amp;#10;        CR = 1&amp;#10;        fixOpacity=1;&amp;#10;&amp;#10;    else:&amp;#10;        fbtext = 'False Alarm'&amp;#10;        fix_size = [0,0]&amp;#10;        hit = 0&amp;#10;        miss = 0&amp;#10;        FA = 1&amp;#10;        CR = 0&amp;#10;        fixOpacity=1;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;hit&quot;, hit);&amp;#10;psychoJS.experiment.addData(&quot;miss&quot;, miss);&amp;#10;psychoJS.experiment.addData(&quot;FA&quot;, FA);&amp;#10;psychoJS.experiment.addData(&quot;CR&quot;, CR);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData('hit', hit)&amp;#10;thisExp.addData('miss', miss)&amp;#10;thisExp.addData('FA', FA)&amp;#10;thisExp.addData('CR', CR)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <ImageComponent name="Fixation">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/fixation.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Fixation" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="$fixOpacity" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="[15,15]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <TextComponent name="feedback_text">
        <Param name="color" updates="set every repeat" val="$fbColor" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="feedback_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val=".0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$fbtext" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="100" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="VSL_RSVP_stimuli">
      <CodeComponent name="PresImages">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="trial_1 = 0" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="trial_1 = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="trial_1 = (trial_1 + 1);&amp;#10;if ((stimorder[(trial_1 - 1)] === 1)) {&amp;#10;    image1 = Pair1[0];&amp;#10;} else {&amp;#10;    if ((stimorder[(trial_1 - 1)] === 2)) {&amp;#10;        image1 = Pair1[1];&amp;#10;    } else {&amp;#10;        if ((stimorder[(trial_1 - 1)] === 3)) {&amp;#10;            image1 = Pair2[0];&amp;#10;        } else {&amp;#10;            if ((stimorder[(trial_1 - 1)] === 4)) {&amp;#10;                image1 = Pair2[1];&amp;#10;            } else {&amp;#10;                if ((stimorder[(trial_1 - 1)] === 5)) {&amp;#10;                    image1 = Pair3[0];&amp;#10;                } else {&amp;#10;                    if ((stimorder[(trial_1 - 1)] === 6)) {&amp;#10;                        image1 = Pair3[1];&amp;#10;                    } else {&amp;#10;                        if ((stimorder[(trial_1 - 1)] === 7)) {&amp;#10;                            image1 = Pair4[0];&amp;#10;                        } else {&amp;#10;                            if ((stimorder[(trial_1 - 1)] === 8)) {&amp;#10;                                image1 = Pair4[1];&amp;#10;                            } else {&amp;#10;                                if ((stimorder[(trial_1 - 1)] === 9)) {&amp;#10;                                    image1 = Random1[0];&amp;#10;                                } else {&amp;#10;                                    if ((stimorder[(trial_1 - 1)] === 10)) {&amp;#10;                                        image1 = Random1[1];&amp;#10;                                    } else {&amp;#10;                                        if ((stimorder[(trial_1 - 1)] === 11)) {&amp;#10;                                            image1 = Random2[0];&amp;#10;                                        } else {&amp;#10;                                            if ((stimorder[(trial_1 - 1)] === 12)) {&amp;#10;                                                image1 = Random2[1];&amp;#10;                                            } else {&amp;#10;                                                if ((stimorder[(trial_1 - 1)] === 13)) {&amp;#10;                                                    image1 = Random3[0];&amp;#10;                                                } else {&amp;#10;                                                    if ((stimorder[(trial_1 - 1)] === 14)) {&amp;#10;                                                        image1 = Random3[1];&amp;#10;                                                    } else {&amp;#10;                                                        if ((stimorder[(trial_1 - 1)] === 15)) {&amp;#10;                                                            image1 = Random4[0];&amp;#10;                                                        } else {&amp;#10;                                                            if ((stimorder[(trial_1 - 1)] === 16)) {&amp;#10;                                                                image1 = Random4[1];&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((nbackflags[(trial_1 - 1)] === 1)) {&amp;#10;    correctResp = &quot;space&quot;;&amp;#10;    nback = 1;&amp;#10;} else {&amp;#10;    correctResp = &quot;None&quot;;&amp;#10;    nback = 0;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#counter&amp;#10;trial_1 = trial_1 + 1&amp;#10;&amp;#10;#determine images to present&amp;#10;# Matched pairs&amp;#10;#trial_1-1? yes&amp;#10;if stimorder[trial_1-1] == 1:&amp;#10;    image1 = Pair1[0]&amp;#10;elif stimorder[trial_1-1] == 2:&amp;#10;    image1 = Pair1[1]&amp;#10;elif stimorder[trial_1-1] == 3:&amp;#10;    image1 = Pair2[0]&amp;#10;elif stimorder[trial_1-1] == 4:&amp;#10;    image1 = Pair2[1]&amp;#10;elif stimorder[trial_1-1] == 5:&amp;#10;    image1 = Pair3[0]&amp;#10;elif stimorder[trial_1-1] == 6:&amp;#10;    image1 = Pair3[1]&amp;#10;elif stimorder[trial_1-1] == 7:&amp;#10;    image1 = Pair4[0]&amp;#10;elif stimorder[trial_1-1] == 8:&amp;#10;    image1 = Pair4[1]&amp;#10;    #foil sets&amp;#10;elif stimorder[trial_1-1] == 9:&amp;#10;    image1 = Random1[0]&amp;#10;elif stimorder[trial_1-1] == 10:&amp;#10;    image1 = Random1[1]&amp;#10;elif stimorder[trial_1-1] == 11:&amp;#10;    image1 = Random2[0]&amp;#10;elif stimorder[trial_1-1] == 12:&amp;#10;    image1 = Random2[1]&amp;#10;elif stimorder[trial_1-1] == 13:&amp;#10;    image1 = Random3[0]&amp;#10;elif stimorder[trial_1-1] == 14:&amp;#10;    image1 = Random3[1]&amp;#10;elif stimorder[trial_1-1] == 15:&amp;#10;    image1 = Random4[0]&amp;#10;elif stimorder[trial_1-1] == 16:&amp;#10;    image1 = Random4[1]&amp;#10;&amp;#10;&amp;#10;#Set correct answer. &amp;#10;if nbackflags[trial_1-1] == 1:&amp;#10;    correctResp = 'space'&amp;#10;    nback = 1&amp;#10;else:&amp;#10;    correctResp = 'None'&amp;#10;    nback = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;trial_1&quot;, trial_1);&amp;#10;psychoJS.experiment.addData(&quot;image1&quot;, image1);&amp;#10;psychoJS.experiment.addData(&quot;nBack&quot;, nback);&amp;#10;psychoJS.experiment.addData(&quot;StimPres&quot;, stimorder[(trial_1 - 1)]);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="#save out trial number&amp;#10;thisExp.addData(&quot;trial_1&quot;,trial_1)&amp;#10;thisExp.addData('image1', image1)&amp;#10;thisExp.addData('nBack', nback)&amp;#10;thisExp.addData('stimPres', stimorder[(trial_1 - 1)])&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="PresImages" valType="code"/>
      </CodeComponent>
      <ImageComponent name="VSL_1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$image1" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="VSL_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(0,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(100, 100)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".75" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'space','None'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$correctResp" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".75" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Recognition_Task">
      <CodeComponent name="RecogPairAssignment">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((Paired_random === 1)) {&amp;#10;    if ((Pair1leftitem === 1)) {&amp;#10;        recogitem1 = Pair1[0];&amp;#10;    } else {&amp;#10;        if ((Pair1leftitem === 3)) {&amp;#10;            recogitem1 = Pair2[0];&amp;#10;        } else {&amp;#10;            if ((Pair1leftitem === 5)) {&amp;#10;                recogitem1 = Pair3[0];&amp;#10;            } else {&amp;#10;                if ((Pair1leftitem === 7)) {&amp;#10;                    recogitem1 = Pair4[0];&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    if ((Pair1rightitem === 2)) {&amp;#10;        recogitem2 = Pair1[1];&amp;#10;    } else {&amp;#10;        if ((Pair1rightitem === 4)) {&amp;#10;            recogitem2 = Pair2[1];&amp;#10;        } else {&amp;#10;            if ((Pair1rightitem === 6)) {&amp;#10;                recogitem2 = Pair3[1];&amp;#10;            } else {&amp;#10;                if ((Pair1rightitem === 8)) {&amp;#10;                    recogitem2 = Pair4[1];&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    if ((Pair2leftitem === 1)) {&amp;#10;        recogitem3 = Pair1[0];&amp;#10;    } else {&amp;#10;        if ((Pair2leftitem === 3)) {&amp;#10;            recogitem3 = Pair2[0];&amp;#10;        } else {&amp;#10;            if ((Pair2leftitem === 5)) {&amp;#10;                recogitem3 = Pair3[0];&amp;#10;            } else {&amp;#10;                if ((Pair2leftitem === 7)) {&amp;#10;                    recogitem3 = Pair4[0];&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    if ((Pair2rightitem === 2)) {&amp;#10;        recogitem4 = Pair1[1];&amp;#10;    } else {&amp;#10;        if ((Pair2rightitem === 4)) {&amp;#10;            recogitem4 = Pair2[1];&amp;#10;        } else {&amp;#10;            if ((Pair2rightitem === 6)) {&amp;#10;                recogitem4 = Pair3[1];&amp;#10;            } else {&amp;#10;                if ((Pair2rightitem === 8)) {&amp;#10;                    recogitem4 = Pair4[1];&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((Paired_random === 2)) {&amp;#10;        if ((Pair1leftitem === 1)) {&amp;#10;            recogitem1 = Random1[0];&amp;#10;        } else {&amp;#10;            if ((Pair1leftitem === 3)) {&amp;#10;                recogitem1 = Random2[0];&amp;#10;            } else {&amp;#10;                if ((Pair1leftitem === 5)) {&amp;#10;                    recogitem1 = Random3[0];&amp;#10;                } else {&amp;#10;                    if ((Pair1leftitem === 7)) {&amp;#10;                        recogitem1 = Random4[0];&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        if ((Pair1rightitem === 2)) {&amp;#10;            recogitem2 = Random1[1];&amp;#10;        } else {&amp;#10;            if ((Pair1rightitem === 4)) {&amp;#10;                recogitem2 = Random2[1];&amp;#10;            } else {&amp;#10;                if ((Pair1rightitem === 6)) {&amp;#10;                    recogitem2 = Random3[1];&amp;#10;                } else {&amp;#10;                    if ((Pair1rightitem === 8)) {&amp;#10;                        recogitem2 = Random4[1];&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        if ((Pair2leftitem === 1)) {&amp;#10;            recogitem3 = Random1[0];&amp;#10;        } else {&amp;#10;            if ((Pair2leftitem === 3)) {&amp;#10;                recogitem3 = Random2[0];&amp;#10;            } else {&amp;#10;                if ((Pair2leftitem === 5)) {&amp;#10;                    recogitem3 = Random3[0];&amp;#10;                } else {&amp;#10;                    if ((Pair2leftitem === 7)) {&amp;#10;                        recogitem3 = Random4[0];&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        if ((Pair2rightitem === 2)) {&amp;#10;            recogitem4 = Random1[1];&amp;#10;        } else {&amp;#10;            if ((Pair2rightitem === 4)) {&amp;#10;                recogitem4 = Random2[1];&amp;#10;            } else {&amp;#10;                if ((Pair2rightitem === 6)) {&amp;#10;                    recogitem4 = Random3[1];&amp;#10;                } else {&amp;#10;                    if ((Pair2rightitem === 8)) {&amp;#10;                        recogitem4 = Random4[1];&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((side === 1)) {&amp;#10;    recogloc1 = [(- 140), 0];&amp;#10;    recogloc2 = [(- 70), 0];&amp;#10;    recogloc3 = [70, 0];&amp;#10;    recogloc4 = [140, 0];&amp;#10;} else {&amp;#10;    if ((side === 2)) {&amp;#10;        recogloc1 = [70, 0];&amp;#10;        recogloc2 = [140, 0];&amp;#10;        recogloc3 = [(- 140), 0];&amp;#10;        recogloc4 = [(- 70), 0];&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if Paired_random == 1:&amp;#10;    if Pair1leftitem == 1:&amp;#10;        recogitem1 = Pair1[0]&amp;#10;    elif Pair1leftitem == 3:&amp;#10;        recogitem1 = Pair2[0]&amp;#10;    elif Pair1leftitem == 5:&amp;#10;        recogitem1 = Pair3[0]&amp;#10;    elif Pair1leftitem == 7:&amp;#10;        recogitem1 = Pair4[0]&amp;#10;    if Pair1rightitem == 2:&amp;#10;        recogitem2 = Pair1[1]&amp;#10;    elif Pair1rightitem == 4:&amp;#10;        recogitem2 = Pair2[1]&amp;#10;    elif Pair1rightitem == 6:&amp;#10;        recogitem2 = Pair3[1]&amp;#10;    elif Pair1rightitem == 8:&amp;#10;        recogitem2 = Pair4[1]&amp;#10;        #determine second pair&amp;#10;    if Pair2leftitem == 1:&amp;#10;        recogitem3 = Pair1[0]&amp;#10;    elif Pair2leftitem == 3:&amp;#10;        recogitem3 = Pair2[0]&amp;#10;    elif Pair2leftitem == 5:&amp;#10;        recogitem3 = Pair3[0]&amp;#10;    elif Pair2leftitem == 7:&amp;#10;        recogitem3 = Pair4[0]&amp;#10;    if Pair2rightitem == 2:&amp;#10;        recogitem4 = Pair1[1]&amp;#10;    elif Pair2rightitem == 4:&amp;#10;        recogitem4 = Pair2[1]&amp;#10;    elif Pair2rightitem == 6:&amp;#10;        recogitem4 = Pair3[1]&amp;#10;    elif Pair2rightitem == 8:&amp;#10;        recogitem4 = Pair4[1]&amp;#10;elif Paired_random == 2:&amp;#10;    if Pair1leftitem == 1:&amp;#10;        recogitem1 = Random1[0]&amp;#10;    elif Pair1leftitem == 3:&amp;#10;        recogitem1 = Random2[0]&amp;#10;    elif Pair1leftitem == 5:&amp;#10;        recogitem1 = Random3[0]&amp;#10;    elif Pair1leftitem == 7:&amp;#10;        recogitem1 = Random4[0]&amp;#10;    if Pair1rightitem == 2:&amp;#10;        recogitem2 = Random1[1]&amp;#10;    elif Pair1rightitem == 4:&amp;#10;        recogitem2 = Random2[1]&amp;#10;    elif Pair1rightitem == 6:&amp;#10;        recogitem2 = Random3[1]&amp;#10;    elif Pair1rightitem == 8:&amp;#10;        recogitem2 = Random4[1]&amp;#10;        #determine second pair&amp;#10;    if Pair2leftitem == 1:&amp;#10;        recogitem3 = Random1[0]&amp;#10;    elif Pair2leftitem == 3:&amp;#10;        recogitem3 = Random2[0]&amp;#10;    elif Pair2leftitem == 5:&amp;#10;        recogitem3 = Random3[0]&amp;#10;    elif Pair2leftitem == 7:&amp;#10;        recogitem3 = Random4[0]&amp;#10;    if Pair2rightitem == 2:&amp;#10;        recogitem4 = Random1[1]&amp;#10;    elif Pair2rightitem == 4:&amp;#10;        recogitem4 = Random2[1]&amp;#10;    elif Pair2rightitem == 6:&amp;#10;        recogitem4 = Random3[1]&amp;#10;    elif Pair2rightitem == 8:&amp;#10;        recogitem4 = Random4[1]&amp;#10;if side == 1:&amp;#10;    recogloc1 = [-140,0]&amp;#10;    recogloc2 = [-70,0]&amp;#10;    recogloc3 = [70,0]&amp;#10;    recogloc4 = [140,0]&amp;#10;elif side == 2:&amp;#10;    recogloc1 = [70,0]&amp;#10;    recogloc2 = [140,0]&amp;#10;    recogloc3 = [-140,0]&amp;#10;    recogloc4 = [-70,0]" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="RecogPairAssignment" valType="code"/>
      </CodeComponent>
      <TextComponent name="Recognition_prompt">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="Recognition_prompt" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 200)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Which of these pairs is more familiar?" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="fixation_3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/fixation.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="fixation_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(15,15)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square1_3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square1_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$recogloc1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square2_3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square2_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$recogloc2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square3_3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square3_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$recogloc3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square4_3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square4_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$recogloc4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Recogitem1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$recogitem1" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Recogitem1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$recogloc1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Recogitem2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$recogitem2" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Recogitem2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$recogloc2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Recogitem3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$recogitem3" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Recogitem3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$recogloc3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Recogitem4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$recogitem4" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Recogitem4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$recogloc4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="Recognition_response">
        <Param name="allowedKeys" updates="constant" val="'left','right'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Recognition_response" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="VWM_Task">
      <CodeComponent name="PresentArray">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var shuffle = function (array) {&amp;#10;    var currentIndex = array.length;&amp;#10;    var temporaryValue, randomIndex;&amp;#10;    while (0 !== currentIndex) {&amp;#10;        randomIndex = Math.floor(Math.random() * currentIndex);&amp;#10;        currentIndex -= 1;&amp;#10;        temporaryValue = array[currentIndex];&amp;#10;        array[currentIndex] = array[randomIndex];&amp;#10;        array[randomIndex] = temporaryValue;&amp;#10;    }&amp;#10;    return array;&amp;#10;};&amp;#10;Locrandomizer = []; PairedBank = []; PairedSetRand = []; Pairloc1x=[]; Pairloc1y = 1; Pairloc2x=1; &amp;#10;Pairloc2y = 1; Pairloc3x = 1; Pairloc3y= 1; Pairloc4x=1; Pairloc4y = 1;&amp;#10;RandomBank = []; RandomSetRand=[]; VWMimage1=[]; VWMimage2 = [];&amp;#10;VWMimage3=[]; VWMimage4=[]; VWMimage5=[]; VWMimage6=[]; VWMimage7=[]; &amp;#10;VWMimage8=[]; arrayorder=[]; image1loc=[]; image2loc=[]; image3loc = []; &amp;#10;image4loc = []; image5loc =[]; image6loc =[];image7loc=[]; image8loc =[];&amp;#10;stimlocx=[];stimlocy = [];&amp;#10;stimtime1 = []; stimtime2 = [];&amp;#10;Pairtime1_1 = [];Pairtime2_1 = [];Pairtime3_1 = [];Pairtime4_1 = [];&amp;#10;Pairtime1_2 = [];Pairtime2_2 = [];Pairtime3_2 = [];Pairtime4_2 = [];&amp;#10;if ((Stimulus_set === 1)) {&amp;#10;    if ((paired_random === 1)) {&amp;#10;        VWMimage1 = Pair1[0];&amp;#10;        VWMimage2 = Pair1[1];&amp;#10;        VWMimage3 = Pair2[0];&amp;#10;        VWMimage4 = Pair2[1];&amp;#10;        VWMimage5 = Pair3[0];&amp;#10;        VWMimage6 = Pair3[1];&amp;#10;        VWMimage7 = Pair4[0];&amp;#10;        VWMimage8 = Pair4[1];&amp;#10;    } else {&amp;#10;        if ((paired_random === 2)) {&amp;#10;            VWMimage1 = Pair1[0];&amp;#10;            VWMimage2 = Pair3[1];&amp;#10;            VWMimage3 = Pair2[0];&amp;#10;            VWMimage4 = Pair4[1];&amp;#10;            VWMimage5 = Pair3[0];&amp;#10;            VWMimage6 = Pair1[1];&amp;#10;            VWMimage7 = Pair4[0];&amp;#10;            VWMimage8 = Pair2[1];&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((Stimulus_set === 2)) {&amp;#10;        if ((paired_random === 1)) {&amp;#10;            VWMimage1 = Random1[0];&amp;#10;            VWMimage2 = Random1[1];&amp;#10;            VWMimage3 = Random2[0];&amp;#10;            VWMimage4 = Random2[1];&amp;#10;            VWMimage5 = Random3[0];&amp;#10;            VWMimage6 = Random3[1];&amp;#10;            VWMimage7 = Random4[0];&amp;#10;            VWMimage8 = Random4[1];&amp;#10;        } else {&amp;#10;            if ((paired_random === 2)) {&amp;#10;                VWMimage1 = Random1[0];&amp;#10;                VWMimage2 = Random3[1];&amp;#10;                VWMimage3 = Random2[0];&amp;#10;                VWMimage4 = Random4[1];&amp;#10;                VWMimage5 = Random3[0];&amp;#10;                VWMimage6 = Random1[1];&amp;#10;                VWMimage7 = Random4[0];&amp;#10;                VWMimage8 = Random2[1];&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;PairedBank = [Pair1[0], Pair1[1], Pair2[0], Pair2[1], Pair3[0], Pair3[1], Pair4[0], Pair4[1]];&amp;#10;RandomBank = [Random1[0], Random1[1], Random2[0], Random2[1], Random3[0], Random3[1], Random4[0], Random4[1]];&amp;#10;PairedSetRand = [Pair1[0], Pair3[1], Pair2[0], Pair4[1], Pair3[0], Pair1[1], Pair4[0], Pair2[1]];&amp;#10;RandomSetRand = [Random1[0], Random3[1], Random2[0], Random4[1], Random3[0], Random1[1], Random4[0], Random2[1]];&amp;#10;stimtime1 = [1, 2, 3, 4];&amp;#10;stimtime2 = [1.5, 2.5, 3.5, 4.5];&amp;#10;stimlocx = [(- 210), (- 70), 70, 210];&amp;#10;stimlocy = [0, 0, 0, 0];&amp;#10;Locrandomizer = shuffle([0, 1, 2, 3]);&amp;#10;arrayorder = [];&amp;#10;for (var idx = 0, _pj_a = Locrandomizer.length; (idx &lt; _pj_a); idx += 1) {&amp;#10;    if ((Locrandomizer[idx] === 0)) {&amp;#10;        Pairloc1x = stimlocx[idx];&amp;#10;        Pairloc1y = stimlocy[idx];&amp;#10;        Pairtime1_1 = stimtime1[idx];&amp;#10;        Pairtime1_2 = stimtime2[idx];&amp;#10;        arrayorder.push(1);&amp;#10;        arrayorder.push(2);&amp;#10;    }&amp;#10;    if ((Locrandomizer[idx] === 1)) {&amp;#10;        Pairloc2x = stimlocx[idx];&amp;#10;        Pairloc2y = stimlocy[idx];&amp;#10;        Pairtime2_1 = stimtime1[idx];&amp;#10;        Pairtime2_2 = stimtime2[idx];&amp;#10;        arrayorder.push(3);&amp;#10;        arrayorder.push(4);&amp;#10;    }&amp;#10;    if ((Locrandomizer[idx] === 2)) {&amp;#10;        Pairloc3x = stimlocx[idx];&amp;#10;        Pairloc3y = stimlocy[idx];&amp;#10;        Pairtime3_1 = stimtime1[idx];&amp;#10;        Pairtime3_2 = stimtime2[idx];&amp;#10;        arrayorder.push(5);&amp;#10;        arrayorder.push(6);&amp;#10;    }&amp;#10;    if ((Locrandomizer[idx] === 3)) {&amp;#10;        Pairloc4x = stimlocx[idx];&amp;#10;        Pairloc4y = stimlocy[idx];&amp;#10;        Pairtime4_1 = stimtime1[idx];&amp;#10;        Pairtime4_2 = stimtime2[idx];&amp;#10;        arrayorder.push(7);&amp;#10;        arrayorder.push(8);&amp;#10;    }&amp;#10;}&amp;#10;image1loc = [(Pairloc1x - 35), Pairloc1y];&amp;#10;image2loc = [(Pairloc1x + 35), Pairloc1y];&amp;#10;image3loc = [(Pairloc2x - 35), Pairloc2y];&amp;#10;image4loc = [(Pairloc2x + 35), Pairloc2y];&amp;#10;image5loc = [(Pairloc3x - 35), Pairloc3y];&amp;#10;image6loc = [(Pairloc3x + 35), Pairloc3y];&amp;#10;image7loc = [(Pairloc4x - 35), Pairloc4y];&amp;#10;image8loc = [(Pairloc4x + 35), Pairloc4y];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="##### determine images to present&amp;#10;import numpy&amp;#10;import random&amp;#10;if Stimulus_set == 1:&amp;#10;    if paired_random == 1:&amp;#10;        #pair1&amp;#10;        VWMimage1 = Pair1[0]&amp;#10;        VWMimage2 = Pair1[1]&amp;#10;        #pair2&amp;#10;        VWMimage3 = Pair2[0]&amp;#10;        VWMimage4 = Pair2[1]&amp;#10;        #pair3&amp;#10;        VWMimage5 = Pair3[0]&amp;#10;        VWMimage6 = Pair3[1]&amp;#10;        #pair4&amp;#10;        VWMimage7 = Pair4[0]&amp;#10;        VWMimage8 = Pair4[1]&amp;#10;    elif paired_random == 2:&amp;#10;        VWMimage1 = Pair1[0]&amp;#10;        VWMimage2 = Pair3[1]&amp;#10;        VWMimage3 = Pair2[0]&amp;#10;        VWMimage4 = Pair4[1]&amp;#10;        VWMimage5 = Pair3[0]&amp;#10;        VWMimage6 = Pair1[1]&amp;#10;        VWMimage7 = Pair4[0]&amp;#10;        VWMimage8 = Pair2[1]&amp;#10;elif Stimulus_set == 2:&amp;#10;    if paired_random == 1:&amp;#10;        VWMimage1 = Random1[0]&amp;#10;        VWMimage2 = Random1[1]&amp;#10;        VWMimage3 = Random2[0]&amp;#10;        VWMimage4 = Random2[1]&amp;#10;        VWMimage5 = Random3[0]&amp;#10;        VWMimage6 = Random3[1]&amp;#10;        VWMimage7 = Random4[0]&amp;#10;        VWMimage8 = Random4[1]&amp;#10;    elif paired_random == 2:&amp;#10;        VWMimage1 = Random1[0]&amp;#10;        VWMimage2 = Random3[1]&amp;#10;        VWMimage3 = Random2[0]&amp;#10;        VWMimage4 = Random4[1]&amp;#10;        VWMimage5 = Random3[0]&amp;#10;        VWMimage6 = Random1[1]&amp;#10;        VWMimage7 = Random4[0]&amp;#10;        VWMimage8 = Random2[1]&amp;#10;&amp;#10;PairedBank = [Pair1[0],Pair1[1],Pair2[0],Pair2[1],Pair3[0],Pair3[1],Pair4[0],Pair4[1]]&amp;#10;RandomBank = [Random1[0],Random1[1],Random2[0],Random2[1],Random3[0],Random3[1],Random4[0],Random4[1]]&amp;#10;&amp;#10;PairedSetRand = [Pair1[0],Pair3[1],Pair2[0],Pair4[1],Pair3[0],Pair1[1],Pair4[0],Pair2[1]]&amp;#10;RandomSetRand = [Random1[0],Random3[1],Random2[0],Random4[1],Random3[0],Random1[1],Random4[0],Random2[1]]&amp;#10;#set location variables&amp;#10;stimtime1 = [1,2,3,4]&amp;#10;stimtime2 = [1.5,2.5,3.5,4.5]&amp;#10;stimlocx = [-210,-70,70,210]&amp;#10;stimlocy = [0,0,0,0]&amp;#10;&amp;#10;Locrandomizer = numpy.random.permutation(4)&amp;#10;#[pair in loc1, pair in loc2, pair in loc3, pairinloc4]&amp;#10;arrayorder = [] #returns list of VVWMimages in order from left to right&amp;#10;for idx in (range(len(Locrandomizer))):&amp;#10;    if Locrandomizer[idx] == 0:&amp;#10;        Pairloc1x = stimlocx[idx]&amp;#10;        Pairloc1y = stimlocy[idx]&amp;#10;        Pairtime1_1 = stimtime1[idx]&amp;#10;        Pairtime1_2 = stimtime2[idx]&amp;#10;        arrayorder.append(1)&amp;#10;        arrayorder.append(2)&amp;#10;    if Locrandomizer[idx] == 1:&amp;#10;        Pairloc2x =stimlocx[idx]&amp;#10;        Pairloc2y =stimlocy[idx]&amp;#10;        Pairtime2_1 = stimtime1[idx]&amp;#10;        Pairtime2_2 = stimtime2[idx]&amp;#10;        arrayorder.append(3)&amp;#10;        arrayorder.append(4)&amp;#10;    if Locrandomizer[idx] == 2:&amp;#10;        Pairloc3x =stimlocx[idx]&amp;#10;        Pairloc3y =stimlocy[idx]&amp;#10;        Pairtime3_1 = stimtime1[idx]&amp;#10;        Pairtime3_2 = stimtime2[idx]&amp;#10;        arrayorder.append(5)&amp;#10;        arrayorder.append(6)&amp;#10;    if Locrandomizer[idx] == 3:&amp;#10;        Pairloc4x =stimlocx[idx]&amp;#10;        Pairloc4y =stimlocy[idx]&amp;#10;        Pairtime4_1 = stimtime1[idx]&amp;#10;        Pairtime4_2 = stimtime2[idx]&amp;#10;        arrayorder.append(7)&amp;#10;        arrayorder.append(8)&amp;#10;        &amp;#10;image1loc = [Pairloc1x-35, Pairloc1y]&amp;#10;image2loc = [Pairloc1x+35, Pairloc1y]&amp;#10;image3loc = [Pairloc2x-35, Pairloc2y]&amp;#10;image4loc = [Pairloc2x+35, Pairloc2y]&amp;#10;image5loc = [Pairloc3x-35, Pairloc3y]&amp;#10;image6loc = [Pairloc3x+35, Pairloc3y]&amp;#10;image7loc = [Pairloc4x-35, Pairloc4y]&amp;#10;image8loc = [Pairloc4x+35, Pairloc4y]&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="PresentArray" valType="code"/>
      </CodeComponent>
      <ImageComponent name="Square1_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square1_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-245, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square2_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square2_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-175,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square3_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square3_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-105,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square4_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square4_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-35,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square5_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square5_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(35,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square6_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square6_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(105,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square7_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square7_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(175,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Square8_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/square.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Square8_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(245,0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Image1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$VWMimage1" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$image1loc" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$Pairtime1_1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Image2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$VWMimage2" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$image2loc" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$Pairtime1_2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Image3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$VWMimage3" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$image3loc" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$Pairtime2_1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Image4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$VWMimage4" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$image4loc" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$Pairtime2_2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Image5">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$VWMimage5" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$image5loc" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$Pairtime3_1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Image6">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$VWMimage6" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$image6loc" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$Pairtime3_2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Image7">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$VWMimage7" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$image7loc" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$Pairtime4_1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="Image8">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$VWMimage8" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="Image8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$image8loc" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(66,66)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$Pairtime4_2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val=".5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <CodeComponent name="Cue_loc">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((responsepos === 1)) {&amp;#10;    Cueloc = [(- 245), 0];&amp;#10;} else {&amp;#10;    if ((responsepos === 2)) {&amp;#10;        Cueloc = [(- 175), 0];&amp;#10;    } else {&amp;#10;        if ((responsepos === 3)) {&amp;#10;            Cueloc = [(- 105), 0];&amp;#10;        } else {&amp;#10;            if ((responsepos === 4)) {&amp;#10;                Cueloc = [(- 35), 0];&amp;#10;            } else {&amp;#10;                if ((responsepos === 5)) {&amp;#10;                    Cueloc = [35, 0];&amp;#10;                } else {&amp;#10;                    if ((responsepos === 6)) {&amp;#10;                        Cueloc = [105, 0];&amp;#10;                    } else {&amp;#10;                        if ((responsepos === 7)) {&amp;#10;                            Cueloc = [175, 0];&amp;#10;                        } else {&amp;#10;                            if ((responsepos === 8)) {&amp;#10;                                Cueloc = [245, 0];&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if responsepos == 1:&amp;#10;    Cueloc = [-245,0]&amp;#10;elif responsepos == 2:&amp;#10;    Cueloc = [-175,0]&amp;#10;elif responsepos == 3:&amp;#10;    Cueloc = [-105,0]&amp;#10;elif responsepos == 4:&amp;#10;    Cueloc = [-35,0]&amp;#10;elif responsepos == 5:&amp;#10;    Cueloc = [35,0]&amp;#10;elif responsepos == 6:&amp;#10;    Cueloc = [105,0]&amp;#10;elif responsepos == 7:&amp;#10;    Cueloc = [175,0]&amp;#10;elif responsepos == 8:&amp;#10;    Cueloc = [245,0]&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="Cue_loc" valType="code"/>
      </CodeComponent>
      <ImageComponent name="CueSq">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/greensq.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="CueSq" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$Cueloc" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(70,70)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="6.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <CodeComponent name="ResponseShapes">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var shuffle = function (array) {&amp;#10;    var currentIndex = array.length;&amp;#10;    var temporaryValue, randomIndex;&amp;#10;    while (0 !== currentIndex) {&amp;#10;        randomIndex = Math.floor(Math.random() * currentIndex);&amp;#10;        currentIndex -= 1;&amp;#10;        temporaryValue = array[currentIndex];&amp;#10;        array[currentIndex] = array[randomIndex];&amp;#10;        array[randomIndex] = temporaryValue;&amp;#10;    }&amp;#10;    return array;&amp;#10;};&amp;#10;responseset = [];&amp;#10;if ((Stimulus_set === 1)) {&amp;#10;    responseset = Pair1.concat(Pair2.concat(Pair3.concat(Pair4)));&amp;#10;} else {&amp;#10;    if ((Stimulus_set === 2)) {&amp;#10;        responseset = Random1.concat(Random2.concat(Random3.concat(Random4)));&amp;#10;    }&amp;#10;}&amp;#10;shuffle(responseset);&amp;#10;responseImage1 = responseset[0];&amp;#10;responseImage2 = responseset[1];&amp;#10;responseImage3 = responseset[2];&amp;#10;responseImage4 = responseset[3];&amp;#10;responseImage5 = responseset[4];&amp;#10;responseImage6 = responseset[5];&amp;#10;responseImage7 = responseset[6];&amp;#10;responseImage8 = responseset[7];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if Stimulus_set == 1:&amp;#10;    responseset = Pair1 + Pair2 + Pair3 + Pair4&amp;#10;elif Stimulus_set == 2:&amp;#10;    responseset = Random1 + Random2 + Random3 + Random4&amp;#10;random.shuffle(responseset)&amp;#10;&amp;#10;&amp;#10;&amp;#10;responseImage1 = responseset[0]&amp;#10;responseImage2 = responseset[1]&amp;#10;responseImage3 = responseset[2]&amp;#10;responseImage4 = responseset[3]&amp;#10;responseImage5 = responseset[4]&amp;#10;responseImage6 = responseset[5]&amp;#10;responseImage7 = responseset[6]&amp;#10;responseImage8 = responseset[7]" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="ResponseShapes" valType="code"/>
      </CodeComponent>
      <ImageComponent name="response1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$responseImage1" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="response1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-245, 210)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(69,69)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="response2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$responseImage2" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="response2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-175, 210)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(69,69)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="response3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$responseImage3" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="response3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-105, 210)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(69,69)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="response4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$responseImage4" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="response4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-35, 210)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(69,69)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="response5">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$responseImage5" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="response5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(35, 210)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(69,69)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="response6">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$responseImage6" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="response6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(105, 210)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(69,69)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="response7">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$responseImage7" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="response7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(175, 210)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(69,69)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <ImageComponent name="response8">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$responseImage8" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="response8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(245, 210)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(69,69)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
      <TextComponent name="resp_label_1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="resp_label_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-245, 260)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="1" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="resp_label_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="resp_label_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-175,260)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="2" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="resp_label_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="resp_label_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-105, 260)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="3" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="resp_label_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="resp_label_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(-35,260)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="4" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="resp_label_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="resp_label_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(35, 260)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="5" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="resp_label_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="resp_label_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(105,260)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="6" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="resp_label_7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="resp_label_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(175,260)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="7" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="resp_label_8">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="resp_label_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(245,260)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="8" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="VWM_Response">
        <Param name="allowedKeys" updates="constant" val="'1','2','3','4','5','6','7','8'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="VWM_Response" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="7" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="VSL_Instructions">
      <CodeComponent name="LoadImages">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="import random&amp;#10;import array&amp;#10;&amp;#10;# create image bank for VSL Images&amp;#10;VSL_imageList = []&amp;#10;&amp;#10;for i in range(16):&amp;#10;    VSL_imageList.append('images/VSL' + str(i) + '.jpg')&amp;#10;&amp;#10;# randomize bank&amp;#10;VSL_imageList = random.sample(VSL_imageList, len(VSL_imageList))&amp;#10;&amp;#10;# create the pairs from the randomized bank&amp;#10;Pair1 = VSL_imageList[:2]                                     # 0-1&amp;#10;Pair2 = VSL_imageList[2:4]         # 2-3&amp;#10;Pair3 = VSL_imageList[4:6]          # 4-5&amp;#10;Pair4 = VSL_imageList[6:8]       # 6-7&amp;#10;Random1 = VSL_imageList[8:10]                                     # 8-9&amp;#10;Random2 = VSL_imageList[10:12]         # 10-11&amp;#10;Random3 = VSL_imageList[12:14]         # 12-13&amp;#10;Random4 = VSL_imageList[14:16]       # 14-15&amp;#10;Pair_List = Pair1 + Pair2 + Pair3 + Pair4 + Random1 + Random2 + Random3 + Random4&amp;#10;&amp;#10;# 2 different categories for pairs&amp;#10;PairedSets = Pair1 + Pair2 + Pair3 + Pair4&amp;#10;RandomSets = Random1 + Random2 + Random3 + Random4&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="var shuffle = function (array) {&amp;#10;    var currentIndex = array.length;&amp;#10;    var temporaryValue, randomIndex;&amp;#10;    while (0 !== currentIndex) {&amp;#10;        randomIndex = Math.floor(Math.random() * currentIndex);&amp;#10;        currentIndex -= 1;&amp;#10;        temporaryValue = array[currentIndex];&amp;#10;        array[currentIndex] = array[randomIndex];&amp;#10;        array[randomIndex] = temporaryValue;&amp;#10;    }&amp;#10;    return array;&amp;#10;};&amp;#10;&amp;#10;VSL_imageList = [];&amp;#10;for (var i = 0, _pj_a = 16; (i &lt; _pj_a); i += 1) {&amp;#10;    VSL_imageList.push(((&quot;images/VSL&quot; + i.toString()) + &quot;.jpg&quot;));&amp;#10;}&amp;#10;&amp;#10;VSL_imageList = shuffle(VSL_imageList);&amp;#10;Pair1 = VSL_imageList.slice(0, 2);&amp;#10;Pair2 = VSL_imageList.slice(2, 4);&amp;#10;Pair3 = VSL_imageList.slice(4, 6);&amp;#10;Pair4 = VSL_imageList.slice(6, 8);&amp;#10;Random1 = VSL_imageList.slice(8, 10);&amp;#10;Random2 = VSL_imageList.slice(10, 12);&amp;#10;Random3 = VSL_imageList.slice(12, 14);&amp;#10;Random4 = VSL_imageList.slice(14, 16);&amp;#10;Pair_List = Pair1.concat(Pair2.concat(Pair3.concat(Pair4.concat(Random1.concat(Random2.concat(Random3.concat(Random4)))))));&amp;#10;PairedSets = Pair1.concat(Pair2.concat(Pair3.concat(Pair4)));&amp;#10;RandomSets = Random1.concat(Random2.concat(Random3.concat(Random4)));&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="LoadImages" valType="code"/>
      </CodeComponent>
      <CodeComponent name="FamiliarizationSequence">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="var shuffle = function (array) {&amp;#10;    var currentIndex = array.length;&amp;#10;    var temporaryValue, randomIndex;&amp;#10;    while (0 !== currentIndex) {&amp;#10;        randomIndex = Math.floor(Math.random() * currentIndex);&amp;#10;        currentIndex -= 1;&amp;#10;        temporaryValue = array[currentIndex];&amp;#10;        array[currentIndex] = array[randomIndex];&amp;#10;        array[randomIndex] = temporaryValue;&amp;#10;    }&amp;#10;    return array;&amp;#10;};&amp;#10;&amp;#10;const makeRepeated = (arr, repeats) =&gt;&amp;#10;  [].concat(...Array.from({ length: repeats }, () =&gt; arr));&amp;#10;&amp;#10;finished = 0;&amp;#10;tripletpool = []; &amp;#10;thissampidx = 0; finished2=0; locpool =[]; nbackflags= []; nbackindex=[]; referencelist=[]; reflist=[]; stimorder = [];  thisloc=0; &amp;#10;thispair=0; thissamp=0; thissamploc=0; tripletorder=[];&amp;#10;locorder =[];&amp;#10;&amp;#10;while ((finished === 0)) {&amp;#10;    finished = 1;&amp;#10;    tripletpool = makeRepeated([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 10);&amp;#10;    &amp;#10;    referencelist = [];&amp;#10;    for (var i = 0; i&lt;320; i++) {&amp;#10;        referencelist.push(i);&amp;#10;    }&amp;#10;    tripletorder = [];&amp;#10;    for (var idx = 0, _pj_a = tripletpool.length; (idx &lt; _pj_a); idx += 1) {&amp;#10;        for (var rejections = 0, _pj_b = 1001; (rejections &lt; _pj_b); rejections += 1) {&amp;#10;            thissampidx = Math.floor(Math.random()*referencelist.length);&amp;#10;            thissamp = referencelist[thissampidx]&amp;#10;            thispair = tripletpool[thissamp];&amp;#10;            if ((idx &gt; 0)) {&amp;#10;                if ((tripletorder[(idx - 1)] !== thispair)) {&amp;#10;                    if ((idx &lt;= 3)) {&amp;#10;                        tripletorder.push(thispair);&amp;#10;                        referencelist.splice(thissampidx,1);&amp;#10;                        break;&amp;#10;                    } else {&amp;#10;                        if (((tripletorder[(idx - 3)] !== tripletorder[(idx - 1)]) || (tripletorder[(idx - 2)] !== thispair))) {&amp;#10;                            tripletorder.push(thispair);&amp;#10;                            referencelist.splice(thissampidx,1);&amp;#10;                            break;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                tripletorder.push(thispair);&amp;#10;                referencelist.splice(thissampidx,1);&amp;#10;                break;&amp;#10;            }&amp;#10;        }&amp;#10;        if ((rejections === 1000)) {&amp;#10;            finished = 0;&amp;#10;            break;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;nbackindex = [];&amp;#10;for (var idx = 0; idx &lt; 320; idx++) {&amp;#10;    if (idx &lt; 60) {&amp;#10;        nbackindex.push(1);&amp;#10;     } else {&amp;#10;        nbackindex.push(0);&amp;#10;    }&amp;#10;}&amp;#10;nbackindex = shuffle(nbackindex);&amp;#10;stimorder = [];&amp;#10;nbackflags = [];&amp;#10;PairIndex = [];&amp;#10;for (var idx = 0, _pj_a = tripletorder.length; (idx &lt; _pj_a); idx += 1) {&amp;#10;    if ((tripletorder[idx] === 1)) {&amp;#10;        stimorder.push(1);&amp;#10;        stimorder.push(2);&amp;#10;        nbackflags.push(0);&amp;#10;        nbackflags.push(0);&amp;#10;        if ((nbackindex[idx] === 1)) {&amp;#10;            stimorder.push(2);&amp;#10;            nbackflags.push(1);&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((tripletorder[idx] === 2)) {&amp;#10;            stimorder.push(3);&amp;#10;            stimorder.push(4);&amp;#10;            nbackflags.push(0);&amp;#10;            nbackflags.push(0);&amp;#10;            if ((nbackindex[idx] === 1)) {&amp;#10;                stimorder.push(4);&amp;#10;                nbackflags.push(1);&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((tripletorder[idx] === 3)) {&amp;#10;                stimorder.push(5);&amp;#10;                stimorder.push(6);&amp;#10;                nbackflags.push(0);&amp;#10;                nbackflags.push(0);&amp;#10;                if ((nbackindex[idx] === 1)) {&amp;#10;                    stimorder.push(6);&amp;#10;                    nbackflags.push(1);&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((tripletorder[idx] === 4)) {&amp;#10;                    stimorder.push(7);&amp;#10;                    stimorder.push(8);&amp;#10;                    nbackflags.push(0);&amp;#10;                    nbackflags.push(0);&amp;#10;                    if ((nbackindex[idx] === 1)) {&amp;#10;                        stimorder.push(8);&amp;#10;                        nbackflags.push(1);&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((tripletorder[idx] === 5)) {&amp;#10;                        stimorder.push(9);&amp;#10;                        stimorder.push(10);&amp;#10;                        nbackflags.push(0);&amp;#10;                        nbackflags.push(0);&amp;#10;                        if ((nbackindex[idx] === 1)) {&amp;#10;                            stimorder.push(10);&amp;#10;                            nbackflags.push(1);&amp;#10;                        }&amp;#10;                    } else {&amp;#10;                        if ((tripletorder[idx] === 6)) {&amp;#10;                            stimorder.push(9);&amp;#10;                            stimorder.push(12);&amp;#10;                            nbackflags.push(0);&amp;#10;                            nbackflags.push(0);&amp;#10;                            if ((nbackindex[idx] === 1)) {&amp;#10;                                stimorder.push(12);&amp;#10;                                nbackflags.push(1);&amp;#10;                            }&amp;#10;                        } else {&amp;#10;                            if ((tripletorder[idx] === 7)) {&amp;#10;                                stimorder.push(9);&amp;#10;                                stimorder.push(14);&amp;#10;                                nbackflags.push(0);&amp;#10;                                nbackflags.push(0);&amp;#10;                                if ((nbackindex[idx] === 1)) {&amp;#10;                                    stimorder.push(14);&amp;#10;                                    nbackflags.push(1);&amp;#10;                                }&amp;#10;                            } else {&amp;#10;                                if ((tripletorder[idx] === 8)) {&amp;#10;                                    stimorder.push(9);&amp;#10;                                    stimorder.push(16);&amp;#10;                                    nbackflags.push(0);&amp;#10;                                    nbackflags.push(0);&amp;#10;                                    if ((nbackindex[idx] === 1)) {&amp;#10;                                        stimorder.push(16);&amp;#10;                                        nbackflags.push(1);&amp;#10;                                    }&amp;#10;                                } else {&amp;#10;                                    if ((tripletorder[idx] === 9)) {&amp;#10;                                        stimorder.push(11);&amp;#10;                                        stimorder.push(10);&amp;#10;                                        nbackflags.push(0);&amp;#10;                                        nbackflags.push(0);&amp;#10;                                        if ((nbackindex[idx] === 1)) {&amp;#10;                                            stimorder.push(10);&amp;#10;                                            nbackflags.push(1);&amp;#10;                                        }&amp;#10;                                    } else {&amp;#10;                                        if ((tripletorder[idx] === 10)) {&amp;#10;                                            stimorder.push(11);&amp;#10;                                            stimorder.push(12);&amp;#10;                                            nbackflags.push(0);&amp;#10;                                            nbackflags.push(0);&amp;#10;                                            if ((nbackindex[idx] === 1)) {&amp;#10;                                                stimorder.push(12);&amp;#10;                                                nbackflags.push(1);&amp;#10;                                            }&amp;#10;                                        } else {&amp;#10;                                            if ((tripletorder[idx] === 11)) {&amp;#10;                                                stimorder.push(11);&amp;#10;                                                stimorder.push(14);&amp;#10;                                                nbackflags.push(0);&amp;#10;                                                nbackflags.push(0);&amp;#10;                                                if ((nbackindex[idx] === 1)) {&amp;#10;                                                    stimorder.push(14);&amp;#10;                                                    nbackflags.push(1);&amp;#10;                                                }&amp;#10;                                            } else {&amp;#10;                                                if ((tripletorder[idx] === 12)) {&amp;#10;                                                    stimorder.push(11);&amp;#10;                                                    stimorder.push(16);&amp;#10;                                                    nbackflags.push(0);&amp;#10;                                                    nbackflags.push(0);&amp;#10;                                                    if ((nbackindex[idx] === 1)) {&amp;#10;                                                        stimorder.push(16);&amp;#10;                                                        nbackflags.push(1);&amp;#10;                                                    }&amp;#10;                                                } else {&amp;#10;                                                    if ((tripletorder[idx] === 13)) {&amp;#10;                                                        stimorder.push(13);&amp;#10;                                                        stimorder.push(10);&amp;#10;                                                        nbackflags.push(0);&amp;#10;                                                        nbackflags.push(0);&amp;#10;                                                        if ((nbackindex[idx] === 1)) {&amp;#10;                                                            stimorder.push(10);&amp;#10;                                                            nbackflags.push(1);&amp;#10;                                                        }&amp;#10;                                                    } else {&amp;#10;                                                        if ((tripletorder[idx] === 14)) {&amp;#10;                                                            stimorder.push(13);&amp;#10;                                                            stimorder.push(12);&amp;#10;                                                            nbackflags.push(0);&amp;#10;                                                            nbackflags.push(0);&amp;#10;                                                            if ((nbackindex[idx] === 1)) {&amp;#10;                                                                stimorder.push(12);&amp;#10;                                                                nbackflags.push(1);&amp;#10;                                                            }&amp;#10;                                                        } else {&amp;#10;                                                            if ((tripletorder[idx] === 15)) {&amp;#10;                                                                stimorder.push(13);&amp;#10;                                                                stimorder.push(14);&amp;#10;                                                                nbackflags.push(0);&amp;#10;                                                                nbackflags.push(0);&amp;#10;                                                                if ((nbackindex[idx] === 1)) {&amp;#10;                                                                    stimorder.push(14);&amp;#10;                                                                    nbackflags.push(1);&amp;#10;                                                                }&amp;#10;                                                            } else {&amp;#10;                                                                if ((tripletorder[idx] === 16)) {&amp;#10;                                                                    stimorder.push(13);&amp;#10;                                                                    stimorder.push(16);&amp;#10;                                                                    nbackflags.push(0);&amp;#10;                                                                    nbackflags.push(0);&amp;#10;                                                                    if ((nbackindex[idx] === 1)) {&amp;#10;                                                                        stimorder.push(16);&amp;#10;                                                                        nbackflags.push(1);&amp;#10;                                                                    }&amp;#10;                                                                } else {&amp;#10;                                                                    if ((tripletorder[idx] === 17)) {&amp;#10;                                                                        stimorder.push(15);&amp;#10;                                                                        stimorder.push(10);&amp;#10;                                                                        nbackflags.push(0);&amp;#10;                                                                        nbackflags.push(0);&amp;#10;                                                                        if ((nbackindex[idx] === 1)) {&amp;#10;                                                                            stimorder.push(10);&amp;#10;                                                                            nbackflags.push(1);&amp;#10;                                                                        }&amp;#10;                                                                    } else {&amp;#10;                                                                        if ((tripletorder[idx] === 18)) {&amp;#10;                                                                            stimorder.push(15);&amp;#10;                                                                            stimorder.push(12);&amp;#10;                                                                            nbackflags.push(0);&amp;#10;                                                                            nbackflags.push(0);&amp;#10;                                                                            if ((nbackindex[idx] === 1)) {&amp;#10;                                                                                stimorder.push(12);&amp;#10;                                                                                nbackflags.push(1);&amp;#10;                                                                            }&amp;#10;                                                                        } else {&amp;#10;                                                                            if ((tripletorder[idx] === 19)) {&amp;#10;                                                                                stimorder.push(15);&amp;#10;                                                                                stimorder.push(14);&amp;#10;                                                                                nbackflags.push(0);&amp;#10;                                                                                nbackflags.push(0);&amp;#10;                                                                                if ((nbackindex[idx] === 1)) {&amp;#10;                                                                                    stimorder.push(14);&amp;#10;                                                                                    nbackflags.push(1);&amp;#10;                                                                                }&amp;#10;                                                                            } else {&amp;#10;                                                                                if ((tripletorder[idx] === 20)) {&amp;#10;                                                                                    stimorder.push(15);&amp;#10;                                                                                    stimorder.push(16);&amp;#10;                                                                                    nbackflags.push(0);&amp;#10;                                                                                    nbackflags.push(0);&amp;#10;                                                                                    if ((nbackindex[idx] === 1)) {&amp;#10;                                                                                        stimorder.push(16);&amp;#10;                                                                                        nbackflags.push(1);&amp;#10;                                                                                    }&amp;#10;                                                                                }&amp;#10;                                                                            }&amp;#10;                                                                        }&amp;#10;                                                                    }&amp;#10;                                                                }&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="import random&amp;#10;import numpy&amp;#10;finished = 0&amp;#10;while finished == 0:&amp;#10;    finished = 1&amp;#10;    tripletpool = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]*10&amp;#10;    referencelist = numpy.arange(0, 320).tolist()&amp;#10;    tripletorder = []&amp;#10;    for idx in range(len(tripletpool)):&amp;#10;        for rejections in range(1001):&amp;#10;            thissamp = random.sample(referencelist,1)&amp;#10;            thissamp = thissamp[0]&amp;#10;            thispair = tripletpool[thissamp]&amp;#10;            if idx &gt; 0:&amp;#10;                if tripletorder[idx-1] != thispair:&amp;#10;                    if idx &lt;= 3:&amp;#10;                        tripletorder.append(thispair)&amp;#10;                        referencelist.remove(thissamp)# %remove item from reference list&amp;#10;                        break&amp;#10;                    else:&amp;#10;                        if (tripletorder[idx-3] != tripletorder[idx-1]) or (tripletorder[idx-2] != thispair):&amp;#10;                            tripletorder.append(thispair)&amp;#10;                            referencelist.remove(thissamp)&amp;#10;                            break&amp;#10;            else:&amp;#10;                tripletorder.append(thispair)&amp;#10;                referencelist.remove(thissamp)&amp;#10;                break&amp;#10;        if rejections == 1000:&amp;#10;            finished = 0&amp;#10;            break&amp;#10;#create triplet order with nback trials and flags&amp;#10;nbackindex = numpy.ones(320)&amp;#10;nbackindex[:60] = 0 #sixty nback responses &amp;#10;numpy.random.shuffle(nbackindex)&amp;#10;&amp;#10;stimorder = []&amp;#10;nbackflags = []&amp;#10;for idx in range(len(tripletorder)):&amp;#10;    if tripletorder[idx] == 1:&amp;#10;        stimorder.append(1) #only second stim&amp;#10;        stimorder.append(2) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(2) #only second stim&amp;#10;            nbackflags.append(1)&amp;#10;    elif tripletorder[idx] == 2:&amp;#10;        stimorder.append(3) #only second stim            &amp;#10;        stimorder.append(4) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(4) #only second stim&amp;#10;            nbackflags.append(1)&amp;#10;    elif tripletorder[idx] ==3:&amp;#10;        stimorder.append(5) #only second stim&amp;#10;        stimorder.append(6) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(6) #only second stim&amp;#10;            nbackflags.append(1)&amp;#10;    elif tripletorder[idx] ==4:&amp;#10;        stimorder.append(7) #only second stim&amp;#10;        stimorder.append(8) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(8) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==5:&amp;#10;        stimorder.append(9) #only second stim&amp;#10;        stimorder.append(10) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(10) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==6:&amp;#10;        stimorder.append(9) #only second stim&amp;#10;        stimorder.append(12) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(12) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==7:&amp;#10;        stimorder.append(9) #only second stim&amp;#10;        stimorder.append(14) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(14) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==8:&amp;#10;        stimorder.append(9) #only second stim&amp;#10;        stimorder.append(16) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(16) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==9:&amp;#10;        stimorder.append(11) #only second stim&amp;#10;        stimorder.append(10) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(10) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==10:&amp;#10;        stimorder.append(11) #only second stim&amp;#10;        stimorder.append(12) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(12) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==11:&amp;#10;        stimorder.append(11) #only second stim&amp;#10;        stimorder.append(14) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(14) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==12:&amp;#10;        stimorder.append(11) #only second stim&amp;#10;        stimorder.append(16) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(16) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==13:&amp;#10;        stimorder.append(13) #only second stim&amp;#10;        stimorder.append(10) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(10) #only second stim&amp;#10;            nbackflags.append(1)&amp;#10;    elif tripletorder[idx] ==14:&amp;#10;        stimorder.append(13) #only second stim&amp;#10;        stimorder.append(12) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(12) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==15:&amp;#10;        stimorder.append(13) #only second stim&amp;#10;        stimorder.append(14) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(14) #only second stim&amp;#10;            nbackflags.append(1)            &amp;#10;    elif tripletorder[idx] ==16:&amp;#10;        stimorder.append(13) #only second stim&amp;#10;        stimorder.append(16) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(16) #only second stim&amp;#10;            nbackflags.append(1)&amp;#10;    elif tripletorder[idx] ==17:&amp;#10;        stimorder.append(15) #only second stim&amp;#10;        stimorder.append(10) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(10) #only second stim&amp;#10;            nbackflags.append(1)&amp;#10;    elif tripletorder[idx] ==18:&amp;#10;        stimorder.append(15) #only second stim&amp;#10;        stimorder.append(12) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(12) #only second stim&amp;#10;            nbackflags.append(1)&amp;#10;    elif tripletorder[idx] ==19:&amp;#10;        stimorder.append(15) #only second stim&amp;#10;        stimorder.append(14) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(14) #only second stim&amp;#10;            nbackflags.append(1)&amp;#10;    elif tripletorder[idx] ==20:&amp;#10;        stimorder.append(15) #only second stim&amp;#10;        stimorder.append(16) #only second stim&amp;#10;        nbackflags.append(0)&amp;#10;        nbackflags.append(0)&amp;#10;        if nbackindex[idx] == 0:&amp;#10;            stimorder.append(16) #only second stim&amp;#10;            nbackflags.append(1)&amp;#10;            &amp;#10;print(len(stimorder))&amp;#10;print(len(nbackflags))" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="FamiliarizationSequence" valType="code"/>
      </CodeComponent>
      <TextComponent name="Instruction_1">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="Instruction_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will now watch a movie consisting of a series of shapes.&amp;#10;Pay attention to the shapes presented. &amp;#10;Whenever one of the shapes appears twice in a row, press the space bar. &amp;#10;You will recieve feedback to your responses of correct, miss, or false alarm. &amp;#10;Please respond as accurately as possible. &amp;#10;Press space to begin.&amp;#10;&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="500" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Instruct_response_1">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Instruct_response_1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Recognition_Instructions">
      <TextComponent name="Instruct_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="Instruct_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will now be performing a recognition task. You will be presented with two sets of shapes at a time. In this task you will indicate which of the two sets of shapes is more familiar to you based on the previous task. Using the left and right arrow keys, select whichever pair of the two is more familiar to you on each trial.  &amp;#10;Press the spacebar to begin. &amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="500" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Instruct_response_2">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Instruct_response_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="VWM_Instructions">
      <TextComponent name="Instruct_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="Instruct_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You will now perform a memory task. On each trial you will be presented with an array of eight shapes. Do your best to remember all of the shapes and their locations. After the shapes disappear, you will be asked to report which shape was in a cued location. One of the locations in the array will be highlighted with a green square. Using the number keys at the top of the keyboard, select whichever shape appeared in the location of the green square from the list of shapes that appears above the array. This task is meant to be difficult so please try your best and do not get discouraged. &amp;#10;Press the spacebar to begin the task.&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="500" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Instruct_Response_3">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Instruct_Response_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="VWM_feedback">
      <CodeComponent name="Decode_response">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((Stimulus_set === 1)) {&amp;#10;    if ((paired_random === 1)) {&amp;#10;        if ((responseset[(Number.parseInt(VWM_Response.keys[0]) - 1)] === PairedSets[(arrayorder[(responsepos - 1)] - 1)])) {&amp;#10;            VWMFeedbackprompt = &quot;Correct!&quot;;&amp;#10;            accurate = 1;&amp;#10;        } else {&amp;#10;            VWMFeedbackprompt = &quot;Incorrect&quot;;&amp;#10;            accurate = 0;&amp;#10;        }&amp;#10;    }&amp;#10;    if ((paired_random === 2)) {&amp;#10;        if ((responseset[(Number.parseInt(VWM_Response.keys[0]) - 1)] === PairedSetRand[(arrayorder[(responsepos - 1)] - 1)])) {&amp;#10;            VWMFeedbackprompt = &quot;Correct!&quot;;&amp;#10;            accurate = 1;&amp;#10;        } else {&amp;#10;            VWMFeedbackprompt = &quot;Incorrect&quot;;&amp;#10;            accurate = 0;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((Stimulus_set === 2)) {&amp;#10;    if ((paired_random === 1)) {&amp;#10;        if ((responseset[(Number.parseInt(VWM_Response.keys[0]) - 1)] === RandomSets[(arrayorder[(responsepos - 1)] - 1)])) {&amp;#10;            VWMFeedbackprompt = &quot;Correct!&quot;;&amp;#10;            accurate = 1;&amp;#10;        } else {&amp;#10;            VWMFeedbackprompt = &quot;Incorrect&quot;;&amp;#10;            accurate = 0;&amp;#10;        }&amp;#10;    }&amp;#10;    if ((paired_random === 2)) {&amp;#10;        if ((responseset[(Number.parseInt(VWM_Response.keys[0]) - 1)] === RandomSetRand[(arrayorder[(responsepos - 1)] - 1)])) {&amp;#10;            VWMFeedbackprompt = &quot;Correct!&quot;;&amp;#10;            accurate = 1;&amp;#10;        } else {&amp;#10;            VWMFeedbackprompt = &quot;Incorrect&quot;;&amp;#10;            accurate = 0;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="####determine shape at answer loc and response loc&amp;#10;#if object at target loc is same object as the response in displayset&amp;#10;if Stimulus_set == 1:&amp;#10;    if paired_random == 1:&amp;#10;        if responseset[int(VWM_Response.keys[0])-1] == PairedSets[arrayorder[responsepos-1]-1]:&amp;#10;            VWMFeedbackprompt = 'Correct!'&amp;#10;            accurate = 1&amp;#10;        else:&amp;#10;            VWMFeedbackprompt = 'Incorrect'&amp;#10;            accurate = 0&amp;#10;&amp;#10;    if paired_random == 2:&amp;#10;        if responseset[int(VWM_Response.keys[0])-1] == PairedSetRand[arrayorder[responsepos-1]-1]:&amp;#10;            VWMFeedbackprompt = 'Correct!'&amp;#10;            accurate = 1&amp;#10;        else:&amp;#10;            VWMFeedbackprompt = 'Incorrect'&amp;#10;            accurate = 0&amp;#10;&amp;#10;if Stimulus_set == 2:&amp;#10;    if paired_random == 1:&amp;#10;        if responseset[int(VWM_Response.keys[0])-1] == RandomSets[arrayorder[responsepos-1]-1]:&amp;#10;            VWMFeedbackprompt = 'Correct!'&amp;#10;            accurate = 1&amp;#10;        else:&amp;#10;            VWMFeedbackprompt = 'Incorrect'&amp;#10;            accurate = 0&amp;#10;&amp;#10;    if paired_random == 2:&amp;#10;        if responseset[int(VWM_Response.keys[0])-1] == RandomSetRand[arrayorder[responsepos-1]-1]:&amp;#10;            VWMFeedbackprompt = 'Correct!'&amp;#10;            accurate = 1&amp;#10;        else:&amp;#10;            VWMFeedbackprompt = 'Incorrect'&amp;#10;            accurate = 0&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;accurate&quot;, accurate);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData('accurate', accurate)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="Decode_response" valType="code"/>
      </CodeComponent>
      <TextComponent name="VWMFeedbackText">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="VWMFeedbackText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$VWMFeedbackprompt" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="intro">
      <TextComponent name="intro_text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="25" valType="code"/>
        <Param name="name" updates="None" val="intro_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="This experiment REQUIRES a computer, with a keyboard..&amp;#10;&amp;#10;A tablet or phone will not work.&amp;#10;&amp;#10;Please maximize the browser window so that you see all the stimuli.&amp;#10;&amp;#10;On the next screen you will see the consent form. Please read it and press y to agree or escape key to quit the experiment. &amp;#10;&amp;#10;Press the space bar.." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="consent">
      <ImageComponent name="consent_form">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/consent.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="consent_form" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(510, 660)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_5">
        <Param name="allowedKeys" updates="constant" val="'y'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Recognition_Pause">
      <ImageComponent name="fixation_pause">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="images/fixation.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="fixation_pause" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(15,15)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="Break">
      <CodeComponent name="code_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if not trial_1 in [175,350,525]:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(trial_1, [175, 350, 525]))) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <TextComponent name="BreakText">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="20" valType="code"/>
        <Param name="name" updates="None" val="BreakText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You may now take a 2-3 minute break. &amp;#10;Please do not get up from your computer &amp;#10;or view other screens during the break.&amp;#10;You may close your eyes if you wish. &amp;#10;When you are ready to continue press the C key." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="BreakResp">
        <Param name="allowedKeys" updates="constant" val="'c'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="BreakResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="intro"/>
    <Routine name="consent"/>
    <Routine name="VSL_Instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials_1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="700" valType="code"/>
      <Param name="name" updates="None" val="trials_1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="VSL_RSVP_stimuli"/>
    <Routine name="feedback"/>
    <Routine name="Break"/>
    <LoopTerminator name="trials_1"/>
    <Routine name="VWM_Instructions"/>
    <LoopInitiator loopType="TrialHandler" name="trials_3">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', 200), ('responsepos', 1)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', 200), ('responsepos', 2)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -250), ('response_locationy', 0), ('responsepos', 3)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -150), ('response_locationy', 0), ('responsepos', 4)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 150), ('response_locationy', 0), ('responsepos', 5)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 250), ('response_locationy', 0), ('responsepos', 6)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', -200), ('responsepos', 7)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', -200), ('responsepos', 8)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 2), ('response_locationx', -50), ('response_locationy', 200), ('responsepos', 1)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 2), ('response_locationx', 50), ('response_locationy', 200), ('responsepos', 2)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 2), ('response_locationx', -250), ('response_locationy', 0), ('responsepos', 3)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 2), ('response_locationx', -150), ('response_locationy', 0), ('responsepos', 4)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 2), ('response_locationx', 150), ('response_locationy', 0), ('responsepos', 5)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 2), ('response_locationx', 250), ('response_locationy', 0), ('responsepos', 6)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 2), ('response_locationx', -50), ('response_locationy', -200), ('responsepos', 7)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 2), ('response_locationx', 50), ('response_locationy', -200), ('responsepos', 8)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', 200), ('responsepos', 1)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', 200), ('responsepos', 2)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -250), ('response_locationy', 0), ('responsepos', 3)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -150), ('response_locationy', 0), ('responsepos', 4)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 150), ('response_locationy', 0), ('responsepos', 5)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 250), ('response_locationy', 0), ('responsepos', 6)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', -200), ('responsepos', 7)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', -200), ('responsepos', 8)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 2), ('response_locationx', -50), ('response_locationy', 200), ('responsepos', 1)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 2), ('response_locationx', 50), ('response_locationy', 200), ('responsepos', 2)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 2), ('response_locationx', -250), ('response_locationy', 0), ('responsepos', 3)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 2), ('response_locationx', -150), ('response_locationy', 0), ('responsepos', 4)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 2), ('response_locationx', 150), ('response_locationy', 0), ('responsepos', 5)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 2), ('response_locationx', 250), ('response_locationy', 0), ('responsepos', 6)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 2), ('response_locationx', -50), ('response_locationy', -200), ('responsepos', 7)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 2), ('response_locationx', 50), ('response_locationy', -200), ('responsepos', 8)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', 200), ('responsepos', 1)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', 200), ('responsepos', 2)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -250), ('response_locationy', 0), ('responsepos', 3)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -150), ('response_locationy', 0), ('responsepos', 4)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 150), ('response_locationy', 0), ('responsepos', 5)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 250), ('response_locationy', 0), ('responsepos', 6)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', -200), ('responsepos', 7)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', -200), ('responsepos', 8)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', 200), ('responsepos', 1)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', 200), ('responsepos', 2)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -250), ('response_locationy', 0), ('responsepos', 3)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -150), ('response_locationy', 0), ('responsepos', 4)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 150), ('response_locationy', 0), ('responsepos', 5)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 250), ('response_locationy', 0), ('responsepos', 6)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', -200), ('responsepos', 7)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', -200), ('responsepos', 8)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', 200), ('responsepos', 1)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', 200), ('responsepos', 2)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -250), ('response_locationy', 0), ('responsepos', 3)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -150), ('response_locationy', 0), ('responsepos', 4)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 150), ('response_locationy', 0), ('responsepos', 5)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 250), ('response_locationy', 0), ('responsepos', 6)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', -200), ('responsepos', 7)]), OrderedDict([('Stimulus_set', 1), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', -200), ('responsepos', 8)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', 200), ('responsepos', 1)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', 200), ('responsepos', 2)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -250), ('response_locationy', 0), ('responsepos', 3)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -150), ('response_locationy', 0), ('responsepos', 4)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 150), ('response_locationy', 0), ('responsepos', 5)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 250), ('response_locationy', 0), ('responsepos', 6)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', -200), ('responsepos', 7)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', -200), ('responsepos', 8)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', 200), ('responsepos', 1)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', 200), ('responsepos', 2)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -250), ('response_locationy', 0), ('responsepos', 3)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -150), ('response_locationy', 0), ('responsepos', 4)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 150), ('response_locationy', 0), ('responsepos', 5)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 250), ('response_locationy', 0), ('responsepos', 6)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', -200), ('responsepos', 7)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', -200), ('responsepos', 8)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', 200), ('responsepos', 1)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', 200), ('responsepos', 2)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -250), ('response_locationy', 0), ('responsepos', 3)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -150), ('response_locationy', 0), ('responsepos', 4)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 150), ('response_locationy', 0), ('responsepos', 5)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 250), ('response_locationy', 0), ('responsepos', 6)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', -50), ('response_locationy', -200), ('responsepos', 7)]), OrderedDict([('Stimulus_set', 2), ('paired_random', 1), ('response_locationx', 50), ('response_locationy', -200), ('responsepos', 8)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="VWM_trial_conditions.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="code"/>
      <Param name="name" updates="None" val="trials_3" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="VWM_Task"/>
    <Routine name="VWM_feedback"/>
    <LoopTerminator name="trials_3"/>
  </Flow>
</PsychoPy2experiment>
